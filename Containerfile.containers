# Unified Multi-Stage Containerfile for bazzite-ai development containers
# Optimized architecture to avoid disk space issues without maximize_space
# Use --target to select which variant to build:
#   --target=base-container     → bazzite-ai-container (CPU-only with dev tools)
#   --target=nvidia-container   → bazzite-ai-container-nvidia (GPU with CUDA only)

ARG FEDORA_VERSION=42

################################################################################
# Stage 1: Common Minimal Base
# Minimal foundation shared by both development and NVIDIA paths
# Contains only Python, basic utilities, and package managers (~500MB)
################################################################################
FROM fedora:${FEDORA_VERSION} AS common-minimal

# Install minimal base utilities and Python environment
RUN --mount=type=tmpfs,dst=/tmp \
    dnf5 install -y \
    # Core utilities
    curl \
    git \
    neovim \
    vim \
    wget \
    zsh \
    # Python environment
    python3 \
    python3-pip \
    && dnf5 clean all

# Install pixi.sh for package management
RUN curl -fsSL https://pixi.sh/install.sh | bash -s -- --yes || echo "pixi install skipped"

# Claude Code CLI
RUN curl -fsSL https://claude.ai/install.sh | bash || echo "Claude Code install skipped"

# Create non-root user (shared by all variants)
RUN useradd -m -s /bin/zsh -G wheel devuser && \
    echo '%wheel ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

WORKDIR /workspace

################################################################################
# Stage 2a: Development Additions
# Adds ALL development tools on top of minimal base (~2GB total)
# Used by base-container for full-featured CPU-only development
################################################################################
FROM common-minimal AS devel-additions

# Install comprehensive development toolchain
RUN --mount=type=tmpfs,dst=/tmp \
    dnf5 install -y \
    # Core development tools
    alsa-lib-devel \
    arch-install-scripts \
    autoconf \
    automake \
    bridge-utils \
    ccache cmake \
    debootstrap \
    dislocker \
    dotnet-sdk-9.0 \
    ecryptfs-utils \
    fdupes \
    fuse-devel \
    fuse-dislocker \
    fuse3-devel \
    gcc gcc-c++ make \
    gh \
    git-lfs \
    golang-bazil-fuse-devel \
    golang-bin \
    html2text \
    htop \
    jdupes \
    libtool \
    nodejs nodejs20 nodejs20-devel nodejs20-full-i18n nodejs20-npm npm \
    php \
    podman podman-compose podman-remote \
    python3-devel python3-tkinter \
    rpm-sign \
    squashfuse \
    strace \
    sysstat \
    apptainer apptainer-suid && \
    # Optional tools
    dnf5 install -y \
        android-tools \
        qemu-kvm \
        restic rclone \
        || echo "Some optional packages not available, continuing..."

# VS Code CLI - Import Microsoft GPG key for package verification
RUN rpm --import https://packages.microsoft.com/keys/microsoft.asc || true && \
    dnf5 config-manager addrepo --set=baseurl="https://packages.microsoft.com/yumrepos/vscode" --id="vscode" || true && \
    dnf5 config-manager setopt vscode.enabled=0 vscode.gpgcheck=1 || true && \
    dnf5 install --enable-repo="vscode" -y code || echo "VS Code install skipped"

# Docker CE for container-in-container
RUN dnf5 config-manager addrepo --from-repofile="https://download.docker.com/linux/fedora/docker-ce.repo" || true && \
    dnf5 config-manager setopt docker-ce-stable.enabled=0 || true && \
    dnf5 install -y --enable-repo="docker-ce-stable" \
        containerd.io \
        docker-buildx-plugin \
        docker-ce \
        docker-ce-cli \
        docker-compose-plugin || \
    dnf5 install -y --enable-repo="docker-ce-test" \
        containerd.io \
        docker-buildx-plugin \
        docker-ce \
        docker-ce-cli \
        docker-compose-plugin || \
    echo "Docker CE install skipped"

# iptable_nat for docker-in-docker
RUN mkdir -p /etc/modules-load.d && \
    echo "iptable_nat" >> /etc/modules-load.d/ip_tables.conf || true

# Install devcontainers CLI for container automation
RUN npm install -g @devcontainers/cli || echo "devcontainers CLI install skipped"

# Cleanup to reduce layer size
RUN dnf5 clean all || true

################################################################################
# Stage 2b: NVIDIA Additions
# Adds ONLY CUDA/ML libraries on top of minimal base (~1.5GB total)
# NO development tools - focused on GPU compute only
# This eliminates disk space issues by keeping NVIDIA variant small
################################################################################
FROM common-minimal AS nvidia-additions

# CUDA environment (provided by host via nvidia-container-toolkit)
# These paths will be available when GPU is passed through from host
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=${CUDA_HOME}/bin:${PATH}
ENV LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}

# Add negativo17 multimedia repository for cuDNN
# CUDA packages moved to multimedia repo in Fedora 42
RUN dnf5 config-manager addrepo \
        --from-repofile="https://negativo17.org/repos/fedora-multimedia.repo" && \
    dnf5 config-manager setopt "fedora-multimedia.enabled=0" && \
    # Import GPG key
    rpm --import https://negativo17.org/repos/RPM-GPG-KEY-slaanesh || true

# Install cuDNN from repository
RUN dnf5 install -y --enable-repo="fedora-multimedia" cuda-cudnn || { \
        echo "::warning::cuDNN not available in repository - using Python wheels..."; \
        pip3 install --root-user-action=ignore nvidia-cudnn-cu12 || \
            echo "::warning::cuDNN installation failed"; \
    }

# Install TensorRT and additional NVIDIA Python tools
# Mount pip cache for faster reinstalls (cache populated by CI)
RUN --mount=type=cache,target=/root/.cache/pip \
    pip3 install --root-user-action=ignore \
    nvidia-tensorrt \
    nvidia-cuda-runtime-cu12 \
    nvidia-nvtx-cu12 \
    nvidia-nvjitlink-cu12 \
    || echo "::warning::Some NVIDIA Python packages failed to install"

# Inline cleanup to reduce layer size
RUN dnf5 clean all || true

# Verify installations
RUN python3 -c "import tensorrt; print(f'TensorRT version: {tensorrt.__version__}')" 2>/dev/null || \
        echo "::warning::TensorRT verification failed" && \
    python3 -c "import nvidia.cudnn" 2>/dev/null || \
        echo "::warning::cuDNN verification failed (may still work via host CUDA)"

################################################################################
# Stage 3a: Base Container (CPU-only variant with dev tools)
# Final stage for bazzite-ai-container
# Full development environment without GPU dependencies
################################################################################
FROM devel-additions AS base-container

# Set environment for base variant (no NVIDIA/CUDA references)
ENV IMAGE_NAME=bazzite-ai-container
ENV IMAGE_VENDOR=atrawog

USER devuser

################################################################################
# Stage 3b: NVIDIA Container (GPU variant with CUDA only)
# Final stage for bazzite-ai-container-nvidia
# Lightweight GPU compute environment (~1.5GB vs previous 3.5GB)
# NO development tools - use base-container for development, this for GPU compute
################################################################################
FROM nvidia-additions AS nvidia-container

# Set environment for NVIDIA variant
ENV IMAGE_NAME=bazzite-ai-container-nvidia
ENV IMAGE_VENDOR=atrawog

USER devuser
