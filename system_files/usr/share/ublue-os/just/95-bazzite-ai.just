# vim: set ft=make :

# Install fonts from brew
install-fonts:
    #!/usr/bin/bash
    echo "Installing extra fonts..."
    brew bundle --file=/usr/share/ublue-os/homebrew/bazzite-dx-fonts.Brewfile

# Toggle default boot between Steam Game Mode (gamescope-session) and Desktop
toggle-gamemode ACTION="":
    #!/usr/bin/bash
    # Lets the user pick the default SDDM autologin session.
    set -euo pipefail
    source /usr/lib/ujust/ujust.sh 2>/dev/null || true

    ACTION="{{ ACTION }}"

    IMAGE_INFO="/usr/share/ublue-os/image-info.json"
    BASE_IMAGE_NAME=$(jq -r '."base-image-name"' < "$IMAGE_INFO" 2>/dev/null || echo "silverblue")

    # Determine desktop session based on base image (KDE = kinoite, GNOME = silverblue)
    DESKTOP_SESSION="gnome-wayland.desktop"
    if [[ $BASE_IMAGE_NAME == "kinoite" ]]; then
        DESKTOP_SESSION="plasma.desktop"
    fi

    GAMEMODE_SESSION="gamescope-session.desktop"
    CONFIG_FILE="/etc/sddm.conf.d/zz-steamos-autologin.conf"

    current_session="Unknown"
    if [[ -f $CONFIG_FILE ]]; then
        current_session=$(grep -Po '^Session=\K.*' "$CONFIG_FILE" || true)
    fi
    if [[ -z $current_session ]]; then
        # Fallback guess
        current_session="$DESKTOP_SESSION"
    fi

    status_pretty="Unknown"
    if [[ $current_session == "$GAMEMODE_SESSION" ]]; then
        status_pretty="Game Mode"
    elif [[ $current_session == "$DESKTOP_SESSION" ]]; then
        status_pretty="Desktop"
    else
        status_pretty="$current_session"
    fi

    ACTION_LOWER=${ACTION,,}

    if [[ $ACTION_LOWER == "help" ]]; then
        echo "Usage: ujust toggle-gamemode [gamemode|desktop|status|help]"
        echo "If no action is provided you'll be prompted with a picker."
        exit 0
    fi

    if [[ $ACTION_LOWER == "status" ]]; then
        echo -e "Current default session: ${bold}${status_pretty}${normal} (${current_session})"
        exit 0
    fi

    CHOICE=""
    if [[ -z $ACTION_LOWER ]]; then
        echo -e "Current default boot target: ${bold}${status_pretty}${normal}\n"
        echo "Select the default session to boot into:"
        echo ""
        CHOICE=$(ugum choose \
            "Steam Game Mode" \
            "Desktop Session" \
            "Exit without changes")
    else
        case "$ACTION_LOWER" in
            gamemode) CHOICE="Steam Game Mode" ;;
            desktop) CHOICE="Desktop Session" ;;
            *) echo "Unrecognized action: $ACTION" ; exit 1 ;;
        esac
    fi

    case "$CHOICE" in
        "Steam Game Mode")
            target_session="$GAMEMODE_SESSION"
            target_pretty="Game Mode"
            ;;
        "Desktop Session")
            target_session="$DESKTOP_SESSION"
            target_pretty="Desktop"
            ;;
        "Exit without changes"|"")
            echo "No changes made."
            exit 0
            ;;
        *)
            echo "Unknown selection: $CHOICE" >&2
            exit 1
            ;;
    esac

    if [[ $target_session == "$current_session" ]]; then
        echo "Already set to $target_pretty ($target_session). Nothing to do."
        exit 0
    fi

    echo "Updating autologin session to: $target_pretty ($target_session)"
    update_content=$'# Autogenerated by ujust toggle-gamemode\n[Autologin]\nSession='"$target_session"

    if [[ $EUID -ne 0 ]]; then
        echo "Requesting root privileges..."
        echo "$update_content" | sudo tee "$CONFIG_FILE" > /dev/null
    else
        printf '%s\n' "$update_content" > "$CONFIG_FILE"
    fi

    echo -e "${green}${bold}Success:${normal} Default session set to $target_pretty. Reboot or log out to apply."

# Setup GPU access for containers (NVIDIA variant only)
setup-gpu-containers:
    #!/usr/bin/bash
    set -euo pipefail
    source /usr/lib/ujust/ujust.sh 2>/dev/null || true

    # Check if nvidia-container-toolkit is installed
    if ! command -v nvidia-ctk &> /dev/null; then
        echo -e "${red}${bold}Error:${normal} nvidia-container-toolkit not found."
        echo "This command requires bazzite-ai-nvidia (KDE variant)."
        echo "bazzite-ai only supports KDE Plasma variants."
        exit 1
    fi

    # Check for NVIDIA GPU
    if ! lspci | grep -i nvidia &> /dev/null; then
        echo -e "${yellow}${bold}Warning:${normal} No NVIDIA GPU detected."
        echo "CDI configuration will still be generated but may not work."
    fi

    echo "Generating CDI configuration for GPU container access..."

    # Generate CDI specification for Podman GPU passthrough
    if [[ $EUID -ne 0 ]]; then
        sudo nvidia-ctk cdi generate --output=/etc/cdi/nvidia.yaml
    else
        nvidia-ctk cdi generate --output=/etc/cdi/nvidia.yaml
    fi

    echo -e "${green}${bold}Success:${normal} CDI configuration at /etc/cdi/nvidia.yaml"
    echo ""
    echo "GPU-accelerated containers now available:"
    echo "  podman run --device nvidia.com/gpu=all <image>"
    echo "  just run-devcontainer"
    echo ""
    echo "Test GPU access:"
    echo "  just test-cuda-devcontainer"

# Install or update Claude Code CLI
install-claude-code:
    #!/usr/bin/bash
    set -euo pipefail
    source /usr/lib/ujust/ujust.sh 2>/dev/null || true

    echo -e "${bold}Installing Claude Code CLI${normal}"
    echo "Location: $HOME/.local/bin/claude"
    echo ""

    # Run official installer
    if curl -fsSL https://claude.ai/install.sh | bash; then
        echo ""
        if command -v claude &> /dev/null; then
            echo -e "${green}${bold}✓ Success:${normal} Claude Code installed"
            claude --version
            echo ""
            echo -e "${bold}Auto-updates:${normal} Enabled by default"
            echo "Claude Code checks for updates on startup"
            echo ""
            echo -e "${bold}Usage:${normal} claude [command]"
            echo "Run 'claude --help' for available commands"
        else
            echo -e "${yellow}${bold}Warning:${normal} Installation completed but 'claude' not in PATH"
            echo "You may need to restart your shell or add ~/.local/bin to PATH"
        fi
    else
        echo -e "${red}${bold}✗ Error:${normal} Claude Code installation failed"
        exit 1
    fi

# Check Claude Code installation and auto-update status
check-claude-code:
    #!/usr/bin/bash
    set -euo pipefail
    source /usr/lib/ujust/ujust.sh 2>/dev/null || true

    echo -e "${bold}Claude Code Status${normal}"
    echo ""

    if command -v claude &> /dev/null; then
        echo -e "${green}✓ Installed${normal}"
        echo "Version: $(claude --version 2>&1 | head -1)"
        echo "Location: $(which claude)"
        echo ""
        echo -e "${bold}Auto-update:${normal} Enabled"
        echo "Claude Code automatically checks for updates on each run"
        echo ""
        echo "To update: Run any claude command (updates check automatically)"
    else
        echo -e "${red}✗ Not installed${normal}"
        echo ""
        echo "To install: ujust install-claude-code"
        exit 1
    fi

# Install development tools flatpaks
install-flatpaks-dev:
    #!/usr/bin/bash
    set -euo pipefail
    source /usr/lib/ujust/ujust.sh 2>/dev/null || true

    echo -e "${bold}Installing Development Tools Flatpaks${normal}"
    flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

    APPS=("org.flatpak.Builder.BaseApp" "io.podman_desktop.PodmanDesktop" "io.github.dvlv.boxbuddyrs" "io.github.flattool.Warehouse" "it.mijorus.gearlever" "com.github.tchx84.Flatseal" "org.sqlitebrowser.sqlitebrowser" "org.virt_manager.virt-manager")
    for app in "${APPS[@]}"; do
        if ! flatpak list --columns=application | grep -q "^${app}$"; then
            echo -e "  ${bold}Installing ${app}...${normal}"
            flatpak install --system -y flathub "$app" || echo -e "  ${yellow}⚠ Failed: ${app}${normal}"
        else
            echo -e "  ${green}✓ ${app}${normal}"
        fi
    done
    echo -e "${green}${bold}Done!${normal}"

# Install media and graphics flatpaks
install-flatpaks-media:
    #!/usr/bin/bash
    set -euo pipefail
    source /usr/lib/ujust/ujust.sh 2>/dev/null || true

    echo -e "${bold}Installing Media & Graphics Flatpaks${normal}"
    flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

    APPS=("org.blender.Blender" "org.gimp.GIMP" "org.inkscape.Inkscape" "org.kde.kdenlive" "org.kde.haruna" "org.kde.gwenview" "com.prusa3d.PrusaSlicer" "com.github.iwalton3.jellyfin-media-player" "org.jellyfin.JellyfinServer")
    for app in "${APPS[@]}"; do
        if ! flatpak list --columns=application | grep -q "^${app}$"; then
            echo -e "  ${bold}Installing ${app}...${normal}"
            flatpak install --system -y flathub "$app" || echo -e "  ${yellow}⚠ Failed: ${app}${normal}"
        else
            echo -e "  ${green}✓ ${app}${normal}"
        fi
    done
    echo -e "${green}${bold}Done!${normal}"

# Install gaming tools flatpaks
install-flatpaks-gaming:
    #!/usr/bin/bash
    set -euo pipefail
    source /usr/lib/ujust/ujust.sh 2>/dev/null || true

    echo -e "${bold}Installing Gaming Tools Flatpaks${normal}"
    flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

    APPS=("com.github.Matoking.protontricks" "io.github.fastrizwaan.WineZGUI" "net.davidotek.pupgui2" "net.supertuxkart.SuperTuxKart")
    for app in "${APPS[@]}"; do
        if ! flatpak list --columns=application | grep -q "^${app}$"; then
            echo -e "  ${bold}Installing ${app}...${normal}"
            flatpak install --system -y flathub "$app" || echo -e "  ${yellow}⚠ Failed: ${app}${normal}"
        else
            echo -e "  ${green}✓ ${app}${normal}"
        fi
    done
    echo -e "${green}${bold}Done!${normal}"

# Install communication flatpaks
install-flatpaks-communication:
    #!/usr/bin/bash
    set -euo pipefail
    source /usr/lib/ujust/ujust.sh 2>/dev/null || true

    echo -e "${bold}Installing Communication Flatpaks${normal}"
    flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

    APPS=("com.discordapp.Discord" "org.signal.Signal" "org.squidowl.halloy")
    for app in "${APPS[@]}"; do
        if ! flatpak list --columns=application | grep -q "^${app}$"; then
            echo -e "  ${bold}Installing ${app}...${normal}"
            flatpak install --system -y flathub "$app" || echo -e "  ${yellow}⚠ Failed: ${app}${normal}"
        else
            echo -e "  ${green}✓ ${app}${normal}"
        fi
    done
    echo -e "${green}${bold}Done!${normal}"

# Install productivity flatpaks
install-flatpaks-productivity:
    #!/usr/bin/bash
    set -euo pipefail
    source /usr/lib/ujust/ujust.sh 2>/dev/null || true

    echo -e "${bold}Installing Productivity Flatpaks${normal}"
    flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

    APPS=("org.mozilla.firefox" "com.google.Chrome" "org.kde.kcalc" "org.kde.kcolorchooser" "org.kde.filelight" "org.kde.okular" "org.qgis.qgis")
    for app in "${APPS[@]}"; do
        if ! flatpak list --columns=application | grep -q "^${app}$"; then
            echo -e "  ${bold}Installing ${app}...${normal}"
            flatpak install --system -y flathub "$app" || echo -e "  ${yellow}⚠ Failed: ${app}${normal}"
        else
            echo -e "  ${green}✓ ${app}${normal}"
        fi
    done
    echo -e "${green}${bold}Done!${normal}"

# Install utilities flatpaks
install-flatpaks-utilities:
    #!/usr/bin/bash
    set -euo pipefail
    source /usr/lib/ujust/ujust.sh 2>/dev/null || true

    echo -e "${bold}Installing Utilities Flatpaks${normal}"
    flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

    APPS=("org.remmina.Remmina" "org.kde.krdc" "com.github.unrud.VideoDownloader" "de.leopoldluley.Clapgrep" "org.fkoehler.KTailctl")
    for app in "${APPS[@]}"; do
        if ! flatpak list --columns=application | grep -q "^${app}$"; then
            echo -e "  ${bold}Installing ${app}...${normal}"
            flatpak install --system -y flathub "$app" || echo -e "  ${yellow}⚠ Failed: ${app}${normal}"
        else
            echo -e "  ${green}✓ ${app}${normal}"
        fi
    done
    echo -e "${green}${bold}Done!${normal}"

# Install experimental flatpaks
install-flatpaks-experimental:
    #!/usr/bin/bash
    set -euo pipefail
    source /usr/lib/ujust/ujust.sh 2>/dev/null || true

    echo -e "${bold}Installing Experimental Flatpaks${normal}"
    flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

    APPS=("io.github.Dretch.MonomerFlatpakExample" "com.parsecgaming.parsec")
    for app in "${APPS[@]}"; do
        if ! flatpak list --columns=application | grep -q "^${app}$"; then
            echo -e "  ${bold}Installing ${app}...${normal}"
            flatpak install --system -y flathub "$app" || echo -e "  ${yellow}⚠ Failed: ${app}${normal}"
        else
            echo -e "  ${green}✓ ${app}${normal}"
        fi
    done
    echo -e "${green}${bold}Done!${normal}"

# Install all flatpaks
install-flatpaks-all:
    #!/usr/bin/bash
    set -euo pipefail
    source /usr/lib/ujust/ujust.sh 2>/dev/null || true

    echo -e "${bold}Installing All Flatpaks (38 total)${normal}"
    echo ""

    just install-flatpaks-dev
    just install-flatpaks-media
    just install-flatpaks-gaming
    just install-flatpaks-communication
    just install-flatpaks-productivity
    just install-flatpaks-utilities
    just install-flatpaks-experimental

    echo ""
    echo -e "${green}${bold}✓ All flatpaks installed!${normal}"

# Install pixi package manager
install-pixi:
    #!/usr/bin/bash
    set -euo pipefail
    source /usr/lib/ujust/ujust.sh 2>/dev/null || true

    echo -e "${bold}Installing pixi.sh${normal}"
    echo "Modern package manager for conda ecosystem"
    echo "Location: $HOME/.pixi/bin/pixi"
    echo ""

    # Check if already installed
    if command -v pixi &> /dev/null; then
        echo -e "${green}✓ pixi already installed${normal}"
        pixi --version
        echo ""
        echo "To update: pixi self-update"
        exit 0
    fi

    # Install to user home directory
    export PIXI_HOME="$HOME/.pixi"
    curl -fsSL https://pixi.sh/install.sh | bash -s -- --yes

    if [ -f "$PIXI_HOME/bin/pixi" ]; then
        echo ""
        echo -e "${green}${bold}✓ Success:${normal} pixi installed"
        "$PIXI_HOME/bin/pixi" --version
        echo ""
        echo -e "${bold}Usage:${normal}"
        echo "  pixi --help"
        echo "  pixi init my-project"
        echo ""
        echo -e "${yellow}Note:${normal} Restart your shell or run: source ~/.bashrc"
    else
        echo -e "${red}${bold}✗ Error:${normal} Installation failed"
        exit 1
    fi

# Install devcontainers CLI
install-devcontainers-cli:
    #!/usr/bin/bash
    set -euo pipefail
    source /usr/lib/ujust/ujust.sh 2>/dev/null || true

    echo -e "${bold}Installing devcontainers CLI${normal}"
    echo "Container development automation tool"
    echo ""

    # Check if already installed
    if command -v devcontainer &> /dev/null; then
        echo -e "${green}✓ devcontainer already installed${normal}"
        devcontainer --version
        echo ""
        echo "To update: npm update -g @devcontainers/cli"
        exit 0
    fi

    # Configure npm to use user directory if not already set
    if [ "$(npm config get prefix)" = "/usr" ] || [ "$(npm config get prefix)" = "/usr/local" ]; then
        echo "Configuring npm to use user directory..."
        npm config set prefix "$HOME/.npm-global"

        # Add to PATH if not already there
        if ! grep -q ".npm-global/bin" "$HOME/.bashrc" 2>/dev/null; then
            echo 'export PATH="$HOME/.npm-global/bin:$PATH"' >> "$HOME/.bashrc"
        fi
    fi

    # Install devcontainers CLI
    echo "Installing @devcontainers/cli..."
    npm install -g @devcontainers/cli

    if command -v devcontainer &> /dev/null; then
        echo ""
        echo -e "${green}${bold}✓ Success:${normal} devcontainers CLI installed"
        devcontainer --version
        echo ""
        echo -e "${bold}Usage:${normal}"
        echo "  devcontainer --help"
        echo "  devcontainer build --workspace-folder ."
        echo ""
        echo -e "${yellow}Note:${normal} Restart your shell or run: source ~/.bashrc"
    else
        echo -e "${red}${bold}✗ Error:${normal} Installation failed"
        echo "You may need to add ~/.npm-global/bin to your PATH"
        exit 1
    fi

# Install all development tools (pixi + devcontainers CLI)
install-dev-tools:
    #!/usr/bin/bash
    set -euo pipefail
    source /usr/lib/ujust/ujust.sh 2>/dev/null || true

    echo -e "${bold}Installing Development Tools${normal}"
    echo ""

    # Install pixi
    echo "1/2 Installing pixi..."
    just install-pixi

    echo ""
    echo "2/2 Installing devcontainers CLI..."
    just install-devcontainers-cli

    echo ""
    echo -e "${green}${bold}✓ All development tools installed${normal}"
