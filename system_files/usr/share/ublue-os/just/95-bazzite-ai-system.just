# vim: set ft=make :

# Toggle default boot between Steam Game Mode (gamescope-session) and Desktop
[group("system")]
toggle-gamemode ACTION="":
    #!/usr/bin/bash
    # Lets the user pick the default SDDM autologin session.
    set -euo pipefail
    source /usr/lib/ujust/ujust.sh 2>/dev/null || true

    ACTION="{{ ACTION }}"

    IMAGE_INFO="/usr/share/ublue-os/image-info.json"
    BASE_IMAGE_NAME=$(jq -r '."base-image-name"' < "$IMAGE_INFO" 2>/dev/null || echo "silverblue")

    # Determine desktop session based on base image (KDE = kinoite, GNOME = silverblue)
    DESKTOP_SESSION="gnome-wayland.desktop"
    if [[ $BASE_IMAGE_NAME == "kinoite" ]]; then
        DESKTOP_SESSION="plasma.desktop"
    fi

    GAMEMODE_SESSION="gamescope-session.desktop"
    CONFIG_FILE="/etc/sddm.conf.d/zz-steamos-autologin.conf"

    current_session="Unknown"
    if [[ -f $CONFIG_FILE ]]; then
        current_session=$(grep -Po '^Session=\K.*' "$CONFIG_FILE" || true)
    fi
    if [[ -z $current_session ]]; then
        # Fallback guess
        current_session="$DESKTOP_SESSION"
    fi

    status_pretty="Unknown"
    if [[ $current_session == "$GAMEMODE_SESSION" ]]; then
        status_pretty="Game Mode"
    elif [[ $current_session == "$DESKTOP_SESSION" ]]; then
        status_pretty="Desktop"
    else
        status_pretty="$current_session"
    fi

    ACTION_LOWER=${ACTION,,}

    if [[ $ACTION_LOWER == "help" ]]; then
        echo "Usage: ujust toggle-gamemode [gamemode|desktop|status|help]"
        echo "If no action is provided you'll be prompted with a picker."
        exit 0
    fi

    if [[ $ACTION_LOWER == "status" ]]; then
        echo -e "Current default session: ${bold}${status_pretty}${normal} (${current_session})"
        exit 0
    fi

    CHOICE=""
    if [[ -z $ACTION_LOWER ]]; then
        echo -e "Current default boot target: ${bold}${status_pretty}${normal}\n"
        echo "Select the default session to boot into:"
        echo ""
        CHOICE=$(ugum choose \
            "Steam Game Mode" \
            "Desktop Session" \
            "Exit without changes")
    else
        case "$ACTION_LOWER" in
            gamemode) CHOICE="Steam Game Mode" ;;
            desktop) CHOICE="Desktop Session" ;;
            *) echo "Unrecognized action: $ACTION" ; exit 1 ;;
        esac
    fi

    case "$CHOICE" in
        "Steam Game Mode")
            target_session="$GAMEMODE_SESSION"
            target_pretty="Game Mode"
            ;;
        "Desktop Session")
            target_session="$DESKTOP_SESSION"
            target_pretty="Desktop"
            ;;
        "Exit without changes"|"")
            echo "No changes made."
            exit 0
            ;;
        *)
            echo "Unknown selection: $CHOICE" >&2
            exit 1
            ;;
    esac

    if [[ $target_session == "$current_session" ]]; then
        echo "Already set to $target_pretty ($target_session). Nothing to do."
        exit 0
    fi

    echo "Updating autologin session to: $target_pretty ($target_session)"
    update_content=$'# Autogenerated by ujust toggle-gamemode\n[Autologin]\nSession='"$target_session"

    if [[ $EUID -ne 0 ]]; then
        echo "Requesting root privileges..."
        echo "$update_content" | sudo tee "$CONFIG_FILE" > /dev/null
    else
        printf '%s\n' "$update_content" > "$CONFIG_FILE"
    fi

    echo -e "${green}${bold}Success:${normal} Default session set to $target_pretty. Reboot or log out to apply."

# Enable passwordless sudo for wheel group
[group("system")]
enable-passwordless-sudo:
    #!/usr/bin/bash
    set -euo pipefail
    source /usr/lib/ujust/ujust.sh 2>/dev/null || true

    echo -e "${bold}Enable Passwordless Sudo${normal}"
    echo ""
    echo -e "${yellow}⚠️  WARNING: Security Implications${normal}"
    echo "This will enable passwordless sudo for all wheel group members."
    echo ""
    echo "Effects:"
    echo "  - Terminal sudo commands will NOT require password"
    echo "  - GUI admin actions will NOT require password"
    echo "  - Reduces system security significantly"
    echo ""
    echo -e "${bold}Recommended only for:${normal}"
    echo "  - Single-user development workstations"
    echo "  - Testing/experimentation environments"
    echo "  - Systems with physical security"
    echo ""
    echo -e "${red}NOT recommended for:${normal}"
    echo "  - Multi-user systems"
    echo "  - Production environments"
    echo "  - Shared workstations"
    echo ""

    read -p "Continue? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Aborted."
        exit 1
    fi

    echo ""
    echo "Enabling passwordless sudo..."

    # Verify user is in wheel group
    if ! groups | grep -q '\bwheel\b'; then
        echo -e "${red}${bold}Error:${normal} Current user is not in wheel group"
        echo "Add yourself to wheel: sudo usermod -aG wheel $USER"
        exit 1
    fi

    # Modify sudoers to enable NOPASSWD for wheel
    sudo sed -i -e '/^%wheel\s\+ALL=(ALL)\s\+ALL/s/^/# /' \
                -e '/^# %wheel\s\+ALL=(ALL)\s\+NOPASSWD: ALL/s/^# //' \
                /etc/sudoers

    # Create polkit rule for passwordless GUI admin actions
    echo 'polkit.addRule(function(action, subject) {
        if (subject.isInGroup("wheel")) {
            return polkit.Result.YES;
        }
    });' | sudo tee /etc/polkit-1/rules.d/10-passwordless-all.rules > /dev/null

    sudo chmod 644 /etc/polkit-1/rules.d/10-passwordless-all.rules
    sudo chown root:root /etc/polkit-1/rules.d/10-passwordless-all.rules

    # Restart polkit to apply changes
    sudo systemctl restart polkit

    echo ""
    echo -e "${green}${bold}✓ Passwordless sudo enabled${normal}"
    echo ""
    echo "Changes applied:"
    echo "  - /etc/sudoers: NOPASSWD enabled for wheel group"
    echo "  - /etc/polkit-1/rules.d/10-passwordless-all.rules: Created"
    echo "  - polkit service: Restarted"
    echo ""
    echo "To revert: ujust disable-passwordless-sudo"

# Disable passwordless sudo for wheel group
[group("system")]
disable-passwordless-sudo:
    #!/usr/bin/bash
    set -euo pipefail
    source /usr/lib/ujust/ujust.sh 2>/dev/null || true

    echo -e "${bold}Disable Passwordless Sudo${normal}"
    echo ""
    echo "This will restore password requirement for sudo commands."
    echo ""

    read -p "Continue? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Aborted."
        exit 1
    fi

    echo ""
    echo "Disabling passwordless sudo..."

    # Revert sudoers changes
    sudo sed -i -e '/^# %wheel\s\+ALL=(ALL)\s\+ALL/s/^# //' \
                -e '/^%wheel\s\+ALL=(ALL)\s\+NOPASSWD: ALL/s/^/# /' \
                /etc/sudoers

    # Remove polkit rule
    if [ -f /etc/polkit-1/rules.d/10-passwordless-all.rules ]; then
        sudo rm -f /etc/polkit-1/rules.d/10-passwordless-all.rules
    fi

    # Restart polkit to apply changes
    sudo systemctl restart polkit

    echo ""
    echo -e "${green}${bold}✓ Passwordless sudo disabled${normal}"
    echo ""
    echo "Changes applied:"
    echo "  - /etc/sudoers: Password required for wheel group"
    echo "  - /etc/polkit-1/rules.d/10-passwordless-all.rules: Removed"
    echo "  - polkit service: Restarted"
    echo ""
    echo "Terminal sudo and GUI admin actions now require password."

# Toggle SSH server (sshd.service)
[group("network")]
toggle-sshd ACTION="":
    #!/usr/bin/bash
    set -euo pipefail
    source /usr/lib/ujust/ujust.sh 2>/dev/null || true

    ACTION="{{ ACTION }}"
    ACTION_LOWER=${ACTION,,}
    SERVICE="sshd.service"

    # Get current state
    if systemctl is-enabled --quiet "$SERVICE" 2>/dev/null; then
        current_enabled="enabled"
        status_pretty="${green}Enabled${normal}"
    else
        current_enabled="disabled"
        status_pretty="${red}Disabled${normal}"
    fi

    if systemctl is-active --quiet "$SERVICE" 2>/dev/null; then
        current_active="active"
        active_pretty="${green}Running${normal}"
    else
        current_active="inactive"
        active_pretty="${red}Stopped${normal}"
    fi

    # Handle status display
    if [[ $ACTION_LOWER == "status" ]]; then
        echo -e "${bold}SSH Server Status${normal}"
        echo ""
        echo -e "Service: ${bold}$SERVICE${normal}"
        echo -e "Enabled: $status_pretty"
        echo -e "Active: $active_pretty"
        echo ""
        if [[ $current_active == "active" ]]; then
            echo "Listening on:"
            ss -tlnp 2>/dev/null | grep ":22 " || echo "  Port 22 (default SSH port)"
            echo ""
            echo "Connect from remote host:"
            echo "  ssh $(whoami)@$(hostname -I | awk '{print $1}')"
        fi
        exit 0
    fi

    # Handle help display
    if [[ $ACTION_LOWER == "help" ]]; then
        echo "Usage: ujust toggle-sshd [enable|disable|status|help]"
        echo "If no action is provided you'll be prompted with a picker."
        exit 0
    fi

    # Interactive mode or direct action
    CHOICE=""
    if [[ -z $ACTION_LOWER ]]; then
        echo -e "${bold}SSH Server Configuration${normal}"
        echo ""
        echo -e "Current state: $status_pretty (service), $active_pretty (daemon)"
        echo ""
        echo "Select action:"
        echo ""
        CHOICE=$(ugum choose \
            "Enable SSH Server" \
            "Disable SSH Server" \
            "Exit without changes")
    else
        case "$ACTION_LOWER" in
            enable) CHOICE="Enable SSH Server" ;;
            disable) CHOICE="Disable SSH Server" ;;
            *) echo "Unrecognized action: $ACTION" ; exit 1 ;;
        esac
    fi

    case "$CHOICE" in
        "Enable SSH Server")
            if [[ $current_enabled == "enabled" ]]; then
                echo "SSH server is already enabled."
                exit 0
            fi

            echo ""
            echo -e "${yellow}⚠️  Security Notice${normal}"
            echo "Enabling SSH server will:"
            echo "  - Open port 22 for remote access"
            echo "  - Allow password authentication by default"
            echo ""
            echo "Security recommendations:"
            echo "  - Use key-based authentication (ssh-keygen)"
            echo "  - Configure firewall rules"
            echo "  - Disable password authentication after key setup"
            echo ""
            read -p "Continue? (y/N): " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                echo "Aborted."
                exit 1
            fi

            echo "Enabling SSH server..."
            sudo systemctl enable "$SERVICE"
            sudo systemctl start "$SERVICE"

            echo ""
            echo -e "${green}${bold}✓ SSH server enabled${normal}"
            echo ""
            echo "Connect from remote host:"
            echo "  ssh $(whoami)@$(hostname -I | awk '{print $1}')"
            ;;

        "Disable SSH Server")
            if [[ $current_enabled == "disabled" ]]; then
                echo "SSH server is already disabled."
                exit 0
            fi

            echo "Disabling SSH server..."
            sudo systemctl stop "$SERVICE"
            sudo systemctl disable "$SERVICE"

            echo ""
            echo -e "${green}${bold}✓ SSH server disabled${normal}"
            echo "Remote SSH access is now unavailable."
            ;;

        "Exit without changes"|"")
            echo "No changes made."
            exit 0
            ;;
        *)
            echo "Unknown selection: $CHOICE" >&2
            exit 1
            ;;
    esac

# Toggle Docker daemon (docker.service)
[group("system")]
toggle-docker ACTION="":
    #!/usr/bin/bash
    set -euo pipefail
    source /usr/lib/ujust/ujust.sh 2>/dev/null || true

    ACTION="{{ ACTION }}"
    ACTION_LOWER=${ACTION,,}
    SERVICE="docker.service"
    SOCKET="docker.socket"

    # Get current state for both service and socket
    if systemctl is-enabled --quiet "$SERVICE" 2>/dev/null; then
        service_enabled="enabled"
        service_status="${green}Enabled${normal}"
    else
        service_enabled="disabled"
        service_status="${red}Disabled${normal}"
    fi

    if systemctl is-enabled --quiet "$SOCKET" 2>/dev/null; then
        socket_enabled="enabled"
        socket_status="${green}Enabled${normal}"
    else
        socket_enabled="disabled"
        socket_status="${red}Disabled${normal}"
    fi

    if systemctl is-active --quiet "$SERVICE" 2>/dev/null; then
        service_active="active"
        service_active_status="${green}Running${normal}"
    else
        service_active="inactive"
        service_active_status="${red}Stopped${normal}"
    fi

    # Handle status display
    if [[ $ACTION_LOWER == "status" ]]; then
        echo -e "${bold}Docker Daemon Status${normal}"
        echo ""
        echo -e "Service (always-on): $service_status ($service_active_status)"
        echo -e "Socket (on-demand): $socket_status"
        echo ""
        echo "Activation modes:"
        echo "  • Socket: Docker starts when first container command runs (efficient)"
        echo "  • Service: Docker runs continuously (always available)"
        echo ""
        if [[ $service_active == "active" ]]; then
            echo "Docker is running. Check with: docker ps"
        else
            echo "Docker daemon is not running."
            if [[ $socket_enabled == "enabled" ]]; then
                echo "Socket activation will start it on first use."
            fi
        fi
        echo ""
        echo "Docker group membership:"
        if groups | grep -q '\bdocker\b'; then
            echo -e "  ${green}✓ Current user is in docker group${normal}"
        else
            echo -e "  ${yellow}✗ Current user is NOT in docker group${normal}"
            echo "  Add with: sudo usermod -aG docker $USER"
            echo "  (requires logout/login to take effect)"
        fi
        exit 0
    fi

    # Handle help display
    if [[ $ACTION_LOWER == "help" ]]; then
        echo "Usage: ujust toggle-docker [enable|disable|status|help]"
        echo "If no action is provided you'll be prompted with a picker."
        echo ""
        echo "This controls docker.service (always-on daemon)."
        echo "docker.socket (on-demand) remains enabled for efficiency."
        exit 0
    fi

    # Interactive mode or direct action
    CHOICE=""
    if [[ -z $ACTION_LOWER ]]; then
        echo -e "${bold}Docker Daemon Configuration${normal}"
        echo ""
        echo -e "Service (always-on): $service_status"
        echo -e "Socket (on-demand): $socket_status"
        echo ""
        echo "Select action:"
        echo ""
        CHOICE=$(ugum choose \
            "Enable Docker Service (always-on)" \
            "Disable Docker Service (socket-only)" \
            "Exit without changes")
    else
        case "$ACTION_LOWER" in
            enable) CHOICE="Enable Docker Service (always-on)" ;;
            disable) CHOICE="Disable Docker Service (socket-only)" ;;
            *) echo "Unrecognized action: $ACTION" ; exit 1 ;;
        esac
    fi

    case "$CHOICE" in
        "Enable Docker Service (always-on)")
            if [[ $service_enabled == "enabled" ]]; then
                echo "Docker service is already enabled."
                exit 0
            fi

            echo "Enabling Docker service (always-on)..."
            sudo systemctl enable "$SERVICE"
            sudo systemctl start "$SERVICE"

            echo ""
            echo -e "${green}${bold}✓ Docker service enabled${normal}"
            echo ""
            echo "Docker daemon will now run continuously."
            echo "Socket activation ($SOCKET) remains enabled for fallback."
            echo ""
            echo "Test with: docker ps"
            ;;

        "Disable Docker Service (socket-only)")
            if [[ $service_enabled == "disabled" ]]; then
                echo "Docker service is already disabled."
                exit 0
            fi

            echo ""
            echo "Disabling Docker service (switching to socket activation only)..."
            sudo systemctl stop "$SERVICE"
            sudo systemctl disable "$SERVICE"

            echo ""
            echo -e "${green}${bold}✓ Docker service disabled${normal}"
            echo ""
            echo "Docker will now use socket activation (starts on-demand)."
            echo "More efficient for systems that don't use Docker constantly."
            echo ""
            echo "Test with: docker ps (will auto-start docker)"
            ;;

        "Exit without changes"|"")
            echo "No changes made."
            exit 0
            ;;
        *)
            echo "Unknown selection: $CHOICE" >&2
            exit 1
            ;;
    esac
